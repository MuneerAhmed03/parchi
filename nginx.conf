events {
    worker_connections  1024;
}

http {
    # Define shared memory zone for caching
    lua_shared_dict room_cache 10m;  # Adjust size as needed
    
    resolver 127.0.0.11 ipv6=off;
    
    upstream app_1 {
        server app_1:8080;
    }
    
    upstream app_2 {
        server app_2:8081;
    }
    
    server {
        listen 80;
        
        root /dev/null;
        
        location /create-room {
            proxy_pass http://app_1;
        }
        
        location /join-room {
            proxy_pass http://app_1;
        }
        
        location /health1 {
            proxy_pass http://app_1;
        }
        
        location /health2 {
            proxy_pass http://app_2;
        }
        
        location /ws {
            access_log /usr/local/openresty/nginx/logs/access.log combined buffer=512k flush=1s;
            error_log /usr/local/openresty/nginx/logs/error.log notice;
            
            set $backend "";
            set $room_id $arg_roomId;
            
            access_by_lua_block {
                local room_cache = ngx.shared.room_cache
                local redis = require "resty.redis"
                local room_id = ngx.var.room_id
                

                local instance = room_cache:get('room:' .. room_id)
                
                if not instance then
                    local red = redis:new()
                    red:set_timeout(1000)
                    
                    local ok, err = red:connect("redis", 6379)
                    if not ok then
                        ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                        ngx.status = 500
                        ngx.header.content_type = "text/plain"
                        ngx.say("Redis connection error: ", err)
                        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                    
                    instance, err = red:get('room:' .. room_id .. ':affinity')
                    
                    if not instance then
                        ngx.log(ngx.ERR, "Redis GET failed for room: ", room_id, ", error: ", err)
                        ngx.status = 400
                        ngx.header.content_type = "text/plain"
                        ngx.say("Room affinity lookup error: ", err)
                        return ngx.exit(ngx.HTTP_BAD_REQUEST)
                    end
                    room_cache:set('room:' .. room_id, instance, 60)
                    
                    red:close()
                end
                
                if instance == "instance_1" then
                    ngx.var.backend = "app_1"
                elseif instance == "instance_2" then
                    ngx.var.backend = "app_2"
                else
                    ngx.status = 404
                    ngx.header.content_type = "text/plain"
                    ngx.say("Room not found or invalid instance")
                    return ngx.exit(ngx.HTTP_NOT_FOUND)
                end
            }
            
            proxy_pass http://$backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }
    }
}