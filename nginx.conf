load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections  1024;
}

http {

    upstream app_1 {
        server app_1:8080;
    }

    upstream app_2 {
        server app_2:8081;
    }

    server {
        listen 80;

        location /create-room {
            proxy_pass http://app_1;
        }

        location /join-room {
            proxy_pass http://app_1;
        }

        location /health1 {
            proxy_pass http://app_1;
        }

        location /health2 {
            proxy_pass http://app_2;
        }

        location /ws {
            set $backend "";

            set $room_id $arg_roomId;

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)

                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.status = 500
                    ngx.say("Redis connection error: " .. err)
                    return ngx.exit(500)
                end

                local room_id = ngx.var.room_id
                local instance, err = red:call('GET', 'room:' .. room_id .. ':affinity')

                if not instance then
                    ngx.status = 400
                    ngx.say("Room affinity lookup error: " .. err)
                    return ngx.exit(400)
                end

                if instance == "instance_1" then
                    ngx.var.backend = "app_1"
                elseif instance == "instance_2" then
                    ngx.var.backend = "app_2"
                else
                    ngx.status = 404
                    ngx.say("Room not found or invalid instance")
                    return ngx.exit(404)
                end
            }

            proxy_pass http://$backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }
    }
}
